{
  "info": {
    "name": "OMM Server - JWT Authentication Testing",
    "description": "Postman collection for testing JWT authentication with admin signup and signin",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_email",
      "value": "testadmin@example.com",
      "type": "string"
    },
    {
      "key": "admin_password",
      "value": "TestPassword123",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Admin Signup",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/signup",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "signup"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response has success status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql(true);",
              "});",
              "",
              "pm.test(\"Response contains OTP\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('otp');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "2. Verify OTP (Get JWT Token)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"otp\": \"1234\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/verify-otp",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "verify-otp"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql(true);",
              "});",
              "",
              "pm.test(\"Response contains JWT token\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('token');",
              "    ",
              "    // Store JWT token for future requests",
              "    pm.collectionVariables.set(\"jwt_token\", jsonData.data.token);",
              "});",
              "",
              "pm.test(\"JWT token is valid format\", function () {",
              "    var jsonData = pm.response.json();",
              "    var token = jsonData.data.token;",
              "    pm.expect(token).to.match(/^eyJ/); // JWT tokens start with 'eyJ'",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "3. Admin Login (Get JWT Token)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/login",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "login"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql(true);",
              "});",
              "",
              "pm.test(\"Response contains JWT token\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('token');",
              "    ",
              "    // Store JWT token for future requests",
              "    pm.collectionVariables.set(\"jwt_token\", jsonData.data.token);",
              "});",
              "",
              "pm.test(\"JWT token is valid format\", function () {",
              "    var jsonData = pm.response.json();",
              "    var token = jsonData.data.token;",
              "    pm.expect(token).to.match(/^eyJ/); // JWT tokens start with 'eyJ'",
              "});",
              "",
              "pm.test(\"Response contains user data\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('id');",
              "    pm.expect(jsonData.data).to.have.property('email');",
              "    pm.expect(jsonData.data).to.have.property('isVerified');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "4. Test Protected Route (Using JWT)",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/admin-profiles",
          "host": ["{{base_url}}"],
          "path": ["api", "admin-profiles"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is not 401 (Unauthorized)\", function () {",
              "    pm.expect(pm.response.code).to.not.eql(401);",
              "});",
              "",
              "pm.test(\"Authorization header is present\", function () {",
              "    pm.expect(pm.request.headers.get('Authorization')).to.contain('Bearer');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "5. Test Invalid JWT Token",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer invalid.jwt.token"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/admin-profiles",
          "host": ["{{base_url}}"],
          "path": ["api", "admin-profiles"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 403 (Forbidden) for invalid token\", function () {",
              "    pm.response.to.have.status(403);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "6. Test Missing Authorization Header",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/admin-profiles",
          "host": ["{{base_url}}"],
          "path": ["api", "admin-profiles"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401 (Unauthorized) for missing token\", function () {",
              "    pm.response.to.have.status(401);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}